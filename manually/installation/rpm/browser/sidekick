#!/bin/env bash
# -*- coding: utf-8 -*-
#
## @Author: sensor-dream
## @Email: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © sensor-dream. All rights reserved. Contacts: sensor-dream@sensor-dream.ru
## @Copyright © Sensor-Dream Boxed System (SDBS). Contacts: sensor-dream@sensor-dream.ru
## @License: http://www.apache.org/licenses/LICENSE-2.0
## @Site: https://sensor-dream.ru
## @File: sidekick
## @Creation date file: 15.04.2021, 19:37:44

[[ -z "${sidekick_script_source}" ]] && declare -rx sidekick_script_source="$BASH_SOURCE"

if [[ -z "${sidekick_script_source_path}" ]]; then
  temp_one="$(dirname ${sidekick_script_source})"
  if [[ "${temp_one}" == '.' ]]; then
    declare -rx sidekick_script_source_path="$(pwd)"
  else
    declare -rx sidekick_script_source_path="${temp_one}"
  fi
fi

if [[ -z "${main_run_script_path}" ]]; then
  declare -rx main_run_script_path="$(pwd)"
  printf "Script runs from path: %s\n" "${main_run_script_path}"
fi

if [[ -z "${main_cfg_script_source}" ]]; then
  check=1
  while [[ "${check}" -eq 1 ]]; do
    if [[ ! -f 'main.cfg' ]]; then
      if [[ "$(pwd)" != "/" ]]; then
        cd ../
      else
        cd ${main_run_script_path}
        check=0
        echo -e '\e[31m'"!!! Not found configuration shared file !!!\033[0m"
        tput sgr0
        exit 1
      fi
    else
      check=0
      declare -rx main_project_path="$(pwd)"
      . "${main_project_path}/main.cfg" "$@"
      cd "${main_run_script_path}"
    fi
  done
fi

printf "Loading: %s\n" "$(readlink -m ${BASH_SOURCE})"

function install_sidekick() {

  echo -e "\nWhat is Sidekick? \

\tSidekick is the next-gen browser for work \

\tBrowsers have become a de-facto standard for work by accident but were never designed for work. \


\tWe asked ourselves: if we were to build a browser optimized for productivity what would it look like? \

\t\tBetter integration with work applications, a powerful global search, enterprise-level security, \

\t\twork automation, speed, and being able to juggle multiple accounts and projects we all work on.\n"

  local key
  echo -en "\nInstall/Remove Sidekick ? (N/y):"
  read key

  case "${key}" in
  Y | y | yes | Yes | YES)

    if [[ -z "$(dnf repoquery --installed sidekick-browser-stable)" ]]; then
      echo
      echo "Installation sidekick browser stable"
      echo
      wget -O ${main_project_path}/temp/sidekick-linux-release.rpm https://api.meetsidekick.com/downloads/df/linux/rpm
      sudo dnf localinstall ${main_project_path}/temp/sidekick-linux-release.rpm
      rm -f "${main_project_path}/temp/sidekick-linux-release.rpm"
    else
      echo
      echo "Remove sidekick browser stable"
      echo
      sudo dnf remove sidekick-browser-stable --noautoremove
    fi
    ;;
  *)
    echo "Good not install Sidekick :)"
    ;;
  esac

}

function main_sidekick_script_source() {

  # printf "Initialise main function of sidekick script source\n";

  install_sidekick "$@"

}

main_sidekick_script_source "$@"
